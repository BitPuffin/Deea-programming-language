(define (abs x) (if (< x 0) (- x) x))
(define (square x) (* x x))
(define (min a b) (if (< a b) a b))
(define (max a b) (if (> a b) a b))
(define (even? n) (= 0 (modulo n 2)))

(define (--reverse-append li tail)
  (if (eq? nil li)
      tail
    (--reverse-append (rest li) (cons (first li) tail))))

(define (reverse l)
  (--reverse-append l nil))

(define (map f l)
  (if (eq? nil l)
      nil
    (cons (f (first l)) (map f (rest l)))))

(define (filter p l)
  (if (eq? nil l)
      nil
      (if (p (first l))
          (cons (first l) (filter p (rest l)))
          (filter p (rest l)))))
