(define (abs x) (if (< x 0) (- x) x))
(define (square x) (* x x))
(define (min a b) (if (< a b) a b))
(define (max a b) (if (> a b) a b))
(define (even? n) (= 0 (modulo n 2)))

(define (map f l)
  (if (eq? nil l)
      nil
    (cons (f (first l)) (map f (rest l)))))

(define (filter p l)
  (if (eq? nil l)
      nil
      (if (p (first l))
          (cons (first l) (filter p (rest l)))
          (filter p (rest l)))))

(define (fold-left fn a b)
  (if (eq? nil b)
      a
      (fold-left fn
                 (fn (first b) a)
                 (rest b))))

(define (reverse li)
  (fold-left (lambda (a b) (cons a b)) nil li))
